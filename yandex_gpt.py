import json
import httpx
import logging
from bot.states import DIET_RULES
from config import YANDEX_API_KEY, YANDEX_FOLDER_ID

logger = logging.getLogger(__name__)

EXAMPLE_RECIPE = """üç≤ –ö—É—Ä–∏–Ω—ã–π —Å—É–ø —Å –∫–∏–Ω–æ–∞ (–•–∞–ª—è–ª—å)

–ö—É—Ö–Ω—è: –ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è
–î–∏–µ—Ç–∞: ‚ò™Ô∏è –•–∞–ª—è–ª—å (–±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã –∏ –∞–ª–∫–æ–≥–æ–ª—è)
–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 40 –º–∏–Ω
–ü–æ—Ä—Ü–∏–π: 4

üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ (—Ö–∞–ª—è–ª—å) - 500 –≥
- –ö–∏–Ω–æ–∞ - 150 –≥
- –ú–æ—Ä–∫–æ–≤—å - 2 —à—Ç (200 –≥)
- –°–µ–ª—å–¥–µ—Ä–µ–π - 2 —Å—Ç–µ–±–ª—è (100 –≥)
- –õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π - 1 —à—Ç (100 –≥)
- –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 2 —Å—Ç.–ª.
- –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
- –í–æ–¥–∞ - 1.5 –ª

üî™ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ù–∞—Ä–µ–∂—å—Ç–µ –∫—É—Ä–∏—Ü—É –∫—É–±–∏–∫–∞–º–∏, –æ–≤–æ—â–∏ —Å–æ–ª–æ–º–∫–æ–π.
2. –û–±–∂–∞—Ä—å—Ç–µ –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 5 –º–∏–Ω.
3. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∏—Ü—É, –æ–±–∂–∞—Ä–∏–≤–∞–π—Ç–µ 7 –º–∏–Ω.
4. –ó–∞–ª–µ–π—Ç–µ –≤–æ–¥–æ–π, –¥–æ–±–∞–≤—å—Ç–µ –∫–∏–Ω–æ–∞ –∏ —Å–ø–µ—Ü–∏–∏.
5. –í–∞—Ä–∏—Ç–µ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ 25 –º–∏–Ω.

üìä –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é:
- –ö–∞–ª–æ—Ä–∏–∏: 320 –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: 28 –≥
- –ñ–∏—Ä—ã: 10 –≥
- –£–≥–ª–µ–≤–æ–¥—ã: 30 –≥

üí° –°–æ–≤–µ—Ç—ã:
- –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∑–µ–ª–µ–Ω—å—é –∏ –ª–∏–º–æ–Ω–æ–º
- –•–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –ª–µ–ø–µ—à–∫–∞–º–∏
- –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∫–∏–Ω–æ–∞ –Ω–∞ –±—É–ª–≥—É—Ä"""

async def generate_recipe(user_data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    try:
        prompt = build_prompt(user_data)
        headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }

        body = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-pro/latest",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pro-–≤–µ—Ä—Å–∏—é
            "completionOptions": {
                "stream": False,
                "temperature": 0.3,  # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                "maxTokens": 3000,
                "top_p": 0.7
            },
            "messages": [
                {
                    "role": "system",
                    "text": (
                        "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –≤ —ç–ª–∏—Ç–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:\n"
                        "1. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
                        "2. –£—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
                        "3. –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–∏–º–µ—Ä—É\n"
                        "4. –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã\n"
                        "5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
                    )
                },
                {
                    "role": "user",
                    "text": prompt
                },
                {
                    "role": "assistant",
                    "text": EXAMPLE_RECIPE
                }
            ]
        }

        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                headers=headers,
                json=body
            )
            response.raise_for_status()
            result = response.json()
            return validate_recipe(result['result']['alternatives'][0]['message']['text'], user_data)

    except Exception as e:
        logger.error(f"Yandex GPT error: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."

def build_prompt(user_data: dict) -> str:
    """–°—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    diet_rules = DIET_RULES.get(user_data['diet_type'], {})
    
    prompt = [
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ—Ü–µ–ø—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
        f"–¢–∏–ø –±–ª—é–¥–∞: {user_data.get('meal_time', '–û–±–µ–¥')}",
        f"–ö—É—Ö–Ω—è: {user_data['cuisine']}",
        f"–î–∏–µ—Ç–∞: {user_data['diet_type']} ({diet_rules.get('description', '')})",
        "",
        "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
        f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {', '.join(diet_rules.get('forbidden', [])) or '–Ω–µ—Ç'}",
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–∞–º–µ–Ω—ã: {json.dumps(diet_rules.get('replacements', {}), ensure_ascii=False}",
        "",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:",
        "- –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–∏–º–µ—Ä—É",
        "- –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª",
        "- –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –¥–ª—è 1 –ø–æ—Ä—Ü–∏–∏",
        "- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å 2-3 —Å–æ–≤–µ—Ç–∞ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é",
        "- –ï—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º"
    ]

    if user_data['search_method'] == "by_name":
        prompt.insert(1, f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {user_data['dish_name']}")
    else:
        prompt.insert(1, f"–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {user_data['ingredients']}")
        prompt.append("- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")

    if user_data.get('allergies'):
        prompt.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã: {user_data['allergies']}")

    return "\n".join(prompt)

def validate_recipe(text: str, user_data: dict) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç"""
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞—Ç—å
    forbidden_phrases = [
        "–ø–æ–∏—â–∏—Ç–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏", "—è –º–æ–≥—É –ø–æ–∏—Å–∫–∞—Ç—å",
        "–≤–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
    ]
    for phrase in forbidden_phrases:
        text = text.lower().replace(phrase, "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    diet_rules = DIET_RULES.get(user_data['diet_type'], {})
    for forbidden in diet_rules.get('forbidden', []):
        if forbidden.lower() in text.lower():
            text = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ—Ü–µ–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {forbidden}, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–∫–ª—é—á–µ–Ω –≤ –≤–∞—à–µ–π –¥–∏–µ—Ç–µ.\n\n" + text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    required_sections = ["üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "üî™ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", "üìä –ö–ë–ñ–£"]
    if not all(section in text for section in required_sections):
        text = "üçΩ " + text  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω–µ—Ç
    
    return text.strip()

def clean_recipe_text(text: str) -> str:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    return text.replace("```", "").replace("**", "").strip()
