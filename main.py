import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logger.error("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: /etc/secrets/bot_env")
    exit(1)
else:
    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω ({len(API_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤)")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–∞—à –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def main_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"),
        KeyboardButton("üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"),
        KeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª")
    )

@dp.message_handler(commands=["start"])
async def start(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI Kitchen Bot!", reply_markup=main_keyboard())

# –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º "–∑–¥–æ—Ä–æ–≤—ã–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def on_startup(dp):
    logger.info("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    logger.warning("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            timeout=60,
            relax=1
        )
        # –í–∞–∂–Ω–æ: aiogram 3.x –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
