import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logger.error("–û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª /etc/secrets/bot_env")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
            [
                KeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"),
                KeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def search_method_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")],
            [KeyboardButton(text="ü•ï –ü–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI Kitchen Bot!", reply_markup=main_keyboard())
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")

@dp.message_handler()
async def echo_message(message: types.Message):
    try:
        await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}", reply_markup=main_keyboard())
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ echo_message: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
