from aiogram import types, F
from aiogram.fsm.context import FSMContext
from bot.keyboards.recipe import (
    meal_time_keyboard,
    cuisine_keyboard,
    diet_keyboard
)
from bot.states import user_states, DIET_RULES


async def ask_meal_time(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏"""
    user_states[message.chat.id] = {"step": "waiting_meal_time"}
    await message.answer(
        "üïí –î–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç?",
        reply_markup=meal_time_keyboard()
    )


async def ask_cuisine(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—É—Ö–Ω—é"""
    if message.text not in ["üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "üåá –û–±–µ–¥", "üåÉ –£–∂–∏–Ω", "‚òï –ü–µ—Ä–µ–∫—É—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì")
        return

    user_states[message.chat.id] = {
        "step": "waiting_cuisine",
        "meal_time": message.text
    }
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:", reply_markup=cuisine_keyboard())


async def ask_diet(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    if message.text not in [btn.text for row in cuisine_keyboard().keyboard for btn in row]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì")
        return

    user_states[message.chat.id].update({
        "cuisine": message.text,
        "step": "waiting_diet"
    })
    await message.answer("ü•ó –ï—Å—Ç—å –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?", reply_markup=diet_keyboard())


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    dp.message.register(ask_meal_time, F.text == "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
    dp.message.register(ask_cuisine, lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_meal_time")
    dp.message.register(ask_diet, lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_cuisine")