#!/usr/bin/env python3
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from fastapi import FastAPI, Request, HTTPException
import uvicorn
from groq import Groq
from dotenv import load_dotenv

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ======================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•
# ======================
load_dotenv('/etc/secrets/bot_env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_KEYS = ['TELEGRAM_BOT_TOKEN', 'GROQ_API_KEY']
for key in REQUIRED_KEYS:
    if not os.getenv(key):
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
        raise SystemExit(1)

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ======================
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()
app = FastAPI()
groq_client = Groq(api_key=os.getenv('GROQ_API_KEY')) if os.getenv('GROQ_API_KEY') else None

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ======================
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞")],
            [KeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Kitchen Bot!",
        reply_markup=get_main_menu()
    )

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω–∏–ª–∏ Text() –Ω–∞ F.text)
@dp.message(F.text == "üç≥ –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞")
async def handle_recipe_request(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞:")

# ======================
# –í–ï–ë–•–£–ö–ò
# ======================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ======================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê
# ======================
@app.on_event("startup")
async def startup():
    webhook_url = os.getenv('WEBHOOK_URL')
    if webhook_url:
        await bot.set_webhook(
            url=f"{webhook_url}/webhook",
            drop_pending_updates=True
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")
        asyncio.create_task(dp.start_polling(bot))

if __name__ == "__main__":
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=int(os.getenv('WEBHOOK_PORT', 5000)),
        log_level="info"
    )
