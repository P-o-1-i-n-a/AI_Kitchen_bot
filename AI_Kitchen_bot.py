from flask import Flask, request
import telebot
from telebot import types
from groq import Groq
import os
import re

# --- –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Groq —Å –∑–∞—â–∏—Ç–æ–π ---
try:
    from groq import Groq
except ImportError as e:
    raise ImportError(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Groq. "
        "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ groq —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (pip install groq)."
    ) from e

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
from config import TOKEN, GROQ_API_KEY, WEBHOOK_URL

bot = telebot.TeleBot(TOKEN)
client = Groq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None
MODEL_NAME = "llama3-70b-8192"
CHANNEL_LINK = "https://t.me/ai_kitchen_channel"

app = Flask(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states = {}


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"))
    markup.add(types.KeyboardButton("üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"))
    markup.add(types.KeyboardButton("üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª"))
    return markup


def meal_time_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üåá –û–±–µ–¥"),
        types.KeyboardButton("üåÉ –£–∂–∏–Ω"),
        types.KeyboardButton("‚òï –ü–µ—Ä–µ–∫—É—Å")
    ]
    markup.add(*buttons)
    return markup


def cuisine_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∞—è"),
        types.KeyboardButton("üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è"),
        types.KeyboardButton("üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è"),
        types.KeyboardButton("üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"),
        types.KeyboardButton("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è"),
        types.KeyboardButton("üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è")
    ]
    markup.add(*buttons)
    return markup


def diet_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"),
        types.KeyboardButton("‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏"),
        types.KeyboardButton("‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ"),
        types.KeyboardButton("üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ"),
        types.KeyboardButton("‚ò™Ô∏è –•–∞–ª—è–ª—å"),
        types.KeyboardButton("‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è")
    ]
    markup.add(*buttons)
    return markup


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø - –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
        "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º (AI) –∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Üì\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=main_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
def show_offer(message):
    bot.send_message(
        message.chat.id,
        "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞:\n\n"
        "1. –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.\n"
        "2. –í—ã –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –∏ —Å–≤–µ–∂–µ—Å—Ç—å.\n"
        "3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        disable_web_page_preview=True
    )


@bot.message_handler(func=lambda m: m.text == "üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª")
def show_channel(message):
    markup = types.InlineKeyboardMarkup()
    btn_channel = types.InlineKeyboardButton("üç≥ AI Kitchen Channel", url=CHANNEL_LINK)
    markup.add(btn_channel)
    
    bot.send_message(
        message.chat.id,
        "üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏!\n"
        "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∏–¥–µ–π!",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
def ask_meal_time(message):
    user_states[message.chat.id] = {"step": "waiting_meal_time"}
    bot.send_message(
        message.chat.id,
        "üïí –î–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç?\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=meal_time_keyboard()
    )


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_meal_time")
def ask_cuisine(message):
    if message.text not in ["üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "üåá –û–±–µ–¥", "üåÉ –£–∂–∏–Ω", "‚òï –ü–µ—Ä–µ–∫—É—Å"]:
        bot.send_message(
            message.chat.id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì\n\n"
            "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start", 
            reply_markup=meal_time_keyboard()
        )
        return

    user_states[message.chat.id] = {
        "step": "waiting_cuisine",
        "meal_time": message.text
    }
    bot.send_message(
        message.chat.id,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=cuisine_keyboard()
    )


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_cuisine")
def ask_diet(message):
    valid_cuisines = ["üá∑üá∫ –†—É—Å—Å–∫–∞—è", "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è", "üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è",
                      "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è", "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è",
                      "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è"]

    if message.text not in valid_cuisines:
        bot.send_message(
            message.chat.id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì\n\n"
            "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start", 
            reply_markup=cuisine_keyboard()
        )
        return

    user_states[message.chat.id]["cuisine"] = message.text
    user_states[message.chat.id]["step"] = "waiting_diet"
    bot.send_message(
        message.chat.id,
        "ü•ó –ï—Å—Ç—å –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=diet_keyboard()
    )


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_diet")
def process_diet_choice(message):
    valid_diets = ["üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏", "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ",
                   "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ", "‚ò™Ô∏è –•–∞–ª—è–ª—å", "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è"]

    if message.text not in valid_diets:
        bot.send_message(
            message.chat.id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì\n\n"
            "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start", 
            reply_markup=diet_keyboard()
        )
        return

    user_states[message.chat.id]["diet_type"] = message.text

    if message.text == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
        user_states[message.chat.id]["step"] = "waiting_allergies"
        bot.send_message(
            message.chat.id,
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
            "–ü—Ä–∏–º–µ—Ä: –æ—Ä–µ—Ö–∏, –º–æ–ª–æ–∫–æ, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
            "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        user_states[message.chat.id]["step"] = "waiting_ingredients"
        ask_for_ingredients(message.chat.id)


def ask_for_ingredients(chat_id):
    bot.send_message(
        chat_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: 2 —è–π—Ü–∞, 100–≥ –º—É–∫–∏, 1 —Å—Ç.–ª. –º–∞—Å–ª–∞\n\n"
        "‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_allergies")
def process_allergies(message):
    user_states[message.chat.id]["allergies"] = message.text
    user_states[message.chat.id]["step"] = "waiting_ingredients"
    ask_for_ingredients(message.chat.id)


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_ingredients")
def process_ingredients(message):
    user_states[message.chat.id]["ingredients"] = message.text
    bot.send_message(
        message.chat.id,
        "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.\n\n"
        "‚ÑπÔ∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )
    generate_recipe(message.chat.id)


def ensure_russian(text):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.sub(r'[a-zA-Z]', '', text).strip()


def generate_recipe(chat_id):
    try:
        data = user_states[chat_id]
        bot.send_chat_action(chat_id, 'typing')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –¥–∏–µ—Ç—ã
        diet_prompt = ""
        if data.get('diet_type') == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
            diet_prompt = f" –ò—Å–∫–ª—é—á–∏: {data.get('allergies', '')}."
        elif data['diet_type'] == "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–º (–º–µ–Ω–µ–µ 300 –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 20–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "‚ò™Ô∏è –•–∞–ª—è–ª—å":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ö–∞–ª—è–ª—å (–±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã, –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ç.–¥.)."
        elif data['diet_type'] == "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø–æ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–±–µ–∑ –º—è—Å–∞, –º–æ–ª–æ–∫–∞, —è–∏—Ü)."

        if data['ingredients'].lower() == '—á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?':
            prompt = f"""–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏.{diet_prompt}
            –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –¥–æ–º–∞ —É —Ä–æ—Å—Å–∏—è–Ω. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""
        else:
            prompt = f"""–°–æ—Å—Ç–∞–≤—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è: {data['ingredients']}.{diet_prompt}
            –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""

        prompt += """
        –§–æ—Ä–º–∞—Ç (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º):
        üçΩ –ù–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        üåç –ö—É—Ö–Ω—è: [—Ç–∏–ø –∫—É—Ö–Ω–∏]
        ü•ó –î–∏–µ—Ç–∞: [—Ç–∏–ø –¥–∏–µ—Ç—ã]
        ‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: [–≤—Ä–µ–º—è]
        üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª):
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        üî™ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        üìä –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é (—É–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö):
        - –ö–∞–ª–æ—Ä–∏–∏: [–∫–∫–∞–ª]
        - –ë–µ–ª–∫–∏: [–≥]
        - –ñ–∏—Ä—ã: [–≥]
        - –£–≥–ª–µ–≤–æ–¥—ã: [–≥]
        üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:"""

        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! "
                               "–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£."
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )

        recipe = ensure_russian(response.choices[0].message.content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–Ω–∞–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
        markup = types.InlineKeyboardMarkup()
        btn_channel = types.InlineKeyboardButton("üç≥ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        markup.add(btn_channel)
        
        bot.send_message(
            chat_id,
            recipe,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(
            chat_id,
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        bot.send_message(
            chat_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=main_keyboard()
        )
    finally:
        user_states[chat_id]["step"] = "done"


@bot.message_handler(func=lambda m: True)
def handle_other(message):
    bot.send_message(
        message.chat.id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç¬ª –∏–ª–∏ /start\n\n"
        "‚ÑπÔ∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=main_keyboard()
    )


# --- Flask Webhook ---
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    else:
        return "Unsupported Media Type", 415


@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    bot.remove_webhook()
    success = bot.set_webhook(url=WEBHOOK_URL)
    return ("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
