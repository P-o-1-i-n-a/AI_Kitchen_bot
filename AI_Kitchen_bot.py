#!/usr/bin/env python3
import os
import re
import logging
import asyncio
import httpx
import uvloop
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from groq import Groq
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –∫–∞–∫ event loop –¥–ª—è asyncio
uvloop.install()

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ======================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•
# ======================
load_dotenv('/etc/secrets/bot_env')
print("DEBUG: TELEGRAM_BOT_TOKEN =", os.getenv("TELEGRAM_BOT_TOKEN"))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_KEYS = ['TELEGRAM_BOT_TOKEN', 'GROQ_API_KEY', 'WEBHOOK_URL']
for key in REQUIRED_KEYS:
    if not os.getenv(key):
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
        raise SystemExit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
MAINTENANCE = os.getenv('MAINTENANCE', 'False').lower() == 'true'
logger.info(f"–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã: DEBUG={DEBUG}, MAINTENANCE={MAINTENANCE}")

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ======================
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()
app = web.Application()

# –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
if MAINTENANCE:
    maintenance_router = Router()
    
    @maintenance_router.message()
    async def maintenance_mode(message: types.Message):
        await message.answer("üîß –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    dp.include_router(maintenance_router)
    logger.warning("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Groq —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
groq_client = Groq(
    api_key=os.getenv('GROQ_API_KEY'),
    base_url="https://api.groq.com/v1"  # ‚Üê –£–±—Ä–∞—Ç—å /openai!
)

MODEL_NAME = "llama3-70b-8192"
CHANNEL_LINK = os.getenv('CHANNEL_LINK', "https://t.me/ai_kitchen_channel")

# ======================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ======================
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
REQUEST_DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ======================
# –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ======================
user_states = {}

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ======================
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
            [KeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")],
            [KeyboardButton(text="üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª")]
        ],
        resize_keyboard=True
    )

def meal_time_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÖ –ó–∞–≤—Ç—Ä–∞–∫"), KeyboardButton(text="üåá –û–±–µ–¥")],
            [KeyboardButton(text="üåÉ –£–∂–∏–Ω"), KeyboardButton(text="‚òï –ü–µ—Ä–µ–∫—É—Å")]
        ],
        resize_keyboard=True
    )

def cuisine_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∞—è"), KeyboardButton(text="üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"), KeyboardButton(text="üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è")],
            [KeyboardButton(text="üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è"), KeyboardButton(text="üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"), KeyboardButton(text="üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è")],
            [KeyboardButton(text="üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"), KeyboardButton(text="üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è"), KeyboardButton(text="üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è")],
            [KeyboardButton(text="üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è")]
        ],
        resize_keyboard=True
    )

def diet_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"), KeyboardButton(text="‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ"), KeyboardButton(text="üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ")],
            [KeyboardButton(text="‚ò™Ô∏è –•–∞–ª—è–ª—å"), KeyboardButton(text="‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è")]
        ],
        resize_keyboard=True
    )

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================
def ensure_russian(text):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.sub(r'[a-zA-Z]', '', text).strip()

async def safe_api_call(call, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(MAX_RETRIES):
        try:
            return await call(*args, **kwargs)
        except (httpx.ReadTimeout, httpx.ConnectTimeout) as e:
            if attempt == MAX_RETRIES - 1:
                raise
            await asyncio.sleep(REQUEST_DELAY * (attempt + 1))
        except Exception as e:
            logger.error(f"API call error: {str(e)}")
            raise

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    if DEBUG:
        logger.debug(f"Start command from {message.from_user.id}")
    
    await message.answer(
    "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø - –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {}\n"
    "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º (AI) –∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Üì".format(os.getenv('BOT_LINK')),
    reply_markup=main_keyboard()
)

@dp.message(F.text == "üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
async def show_offer(message: types.Message):
    await message.answer(
        "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞:\n\n"
        "1. –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.\n"
        "2. –í—ã –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –∏ —Å–≤–µ–∂–µ—Å—Ç—å.\n"
        "3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        disable_web_page_preview=True
    )

@dp.message(F.text == "üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª")
async def show_channel(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç≥ AI Kitchen Channel", url=CHANNEL_LINK)]
    ])
    await message.answer(
        "üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏!",
        reply_markup=markup
    )

@dp.message(F.text == "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def ask_meal_time(message: types.Message):
    if MAINTENANCE:
        return
    
    user_states[message.chat.id] = {"step": "waiting_meal_time"}
    await message.answer(
        "üïí –î–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç?",
        reply_markup=meal_time_keyboard()
    )

@dp.message(
    lambda message: user_states.get(message.chat.id, {}).get("step") == "waiting_meal_time"
)
async def ask_cuisine(message: types.Message):
    if MAINTENANCE:
        return
        
    if message.text not in ["üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "üåá –û–±–µ–¥", "üåÉ –£–∂–∏–Ω", "‚òï –ü–µ—Ä–µ–∫—É—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", 
                           reply_markup=meal_time_keyboard())
        return

    user_states[message.chat.id] = {
        "step": "waiting_cuisine",
        "meal_time": message.text
    }
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:", reply_markup=cuisine_keyboard())

@dp.message(
    lambda message: user_states.get(message.chat.id, {}).get("step") == "waiting_cuisine"
)
async def ask_diet(message: types.Message):
    if MAINTENANCE:
        return
        
    valid_cuisines = ["üá∑üá∫ –†—É—Å—Å–∫–∞—è", "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è", "üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è",
                     "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è", "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è",
                     "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è"]

    if message.text not in valid_cuisines:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", 
                           reply_markup=cuisine_keyboard())
        return

    user_states[message.chat.id]["cuisine"] = message.text
    user_states[message.chat.id]["step"] = "waiting_diet"
    await message.answer("ü•ó –ï—Å—Ç—å –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?", reply_markup=diet_keyboard())

@dp.message(
    lambda message: user_states.get(message.chat.id, {}).get("step") == "waiting_diet"
)
async def process_diet_choice(message: types.Message):
    if MAINTENANCE:
        return
        
    valid_diets = ["üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏", "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ",
                  "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ", "‚ò™Ô∏è –•–∞–ª—è–ª—å", "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è"]

    if message.text not in valid_diets:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", 
                           reply_markup=diet_keyboard())
        return

    user_states[message.chat.id]["diet_type"] = message.text

    if message.text == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
        user_states[message.chat.id]["step"] = "waiting_allergies"
        await message.answer(
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
            "–ü—Ä–∏–º–µ—Ä: –æ—Ä–µ—Ö–∏, –º–æ–ª–æ–∫–æ, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        user_states[message.chat.id]["step"] = "waiting_ingredients"
        await ask_for_ingredients(message.chat.id)

async def ask_for_ingredients(chat_id: int):
    if MAINTENANCE:
        return
        
    await bot.send_message(
        chat_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: 2 —è–π—Ü–∞, 100–≥ –º—É–∫–∏, 1 —Å—Ç.–ª. –º–∞—Å–ª–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(
    lambda message: user_states.get(message.chat.id, {}).get("step") == "waiting_allergies"
)
async def process_allergies(message: types.Message):
    if MAINTENANCE:
        return
        
    user_states[message.chat.id]["allergies"] = message.text
    user_states[message.chat.id]["step"] = "waiting_ingredients"
    await ask_for_ingredients(message.chat.id)

@dp.message(
    lambda message: user_states.get(message.chat.id, {}).get("step") == "waiting_ingredients"
)
async def process_ingredients(message: types.Message):
    if MAINTENANCE:
        return
        
    user_states[message.chat.id]["ingredients"] = message.text
    await message.answer(
        "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await generate_recipe(message.chat.id)

async def generate_recipe(chat_id: int):
    try:
        if MAINTENANCE:
            await bot.send_message(chat_id, "üîß –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        data = user_states[chat_id]
        await bot.send_chat_action(chat_id, 'typing')

        if DEBUG:
            logger.debug(f"Generating recipe for {chat_id} with data: {data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        diet_prompt = ""
        if data.get('diet_type') == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
            diet_prompt = f" –ò—Å–∫–ª—é—á–∏: {data.get('allergies', '')}."
        elif data['diet_type'] == "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–º (–º–µ–Ω–µ–µ 300 –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 20–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "‚ò™Ô∏è –•–∞–ª—è–ª—å":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ö–∞–ª—è–ª—å (–±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã, –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ç.–¥.)."
        elif data['diet_type'] == "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø–æ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–±–µ–∑ –º—è—Å–∞, –º–æ–ª–æ–∫–∞, —è–∏—Ü)."

        prompt = f"""–°–æ—Å—Ç–∞–≤—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è: {data['ingredients']}.{diet_prompt}
        –§–æ—Ä–º–∞—Ç (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º):
        üçΩ –ù–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        üåç –ö—É—Ö–Ω—è: [—Ç–∏–ø –∫—É—Ö–Ω–∏]
        ü•ó –î–∏–µ—Ç–∞: [—Ç–∏–ø –¥–∏–µ—Ç—ã]
        ‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: [–≤—Ä–µ–º—è]
        üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª):
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        üî™ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        üìä –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é (—É–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö):
        - –ö–∞–ª–æ—Ä–∏–∏: [–∫–∫–∞–ª]
        - –ë–µ–ª–∫–∏: [–≥]
        - –ñ–∏—Ä—ã: [–≥]
        - –£–≥–ª–µ–≤–æ–¥—ã: [–≥]
        üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:"""

        response = await safe_api_call(
            groq_client.chat.completions.create,
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )

        recipe = ensure_russian(response.choices[0].message.content)
        
        if DEBUG:
            logger.debug(f"Generated recipe: {recipe[:200]}...")
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç≥ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
        ])
        
        await bot.send_message(
            chat_id,
            recipe,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        await bot.send_message(
            chat_id,
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=main_keyboard()
        )

    except (httpx.ReadTimeout, httpx.ConnectTimeout):
        await bot.send_message(
            chat_id,
            "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=main_keyboard()
        )
    finally:
        if chat_id in user_states:
            user_states[chat_id]["step"] = "done"

@dp.message()
async def handle_other(message: types.Message):
    if MAINTENANCE:
        return
        
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç¬ª –∏–ª–∏ /start",
        reply_markup=main_keyboard()
    )

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–ê
# ======================
async def handle_webhook(request):
    try:
        update_data = await request.json()
        update = types.Update(**update_data)
        await dp.feed_update(bot=bot, update=update)
        return web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(text="Error", status=500)

# ======================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ======================
async def on_startup(bot: Bot):
    if DEBUG:
        logging.basicConfig(
            level=logging.DEBUG,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        logger.info("–†–µ–∂–∏–º DEBUG –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    webhook_url = os.getenv('WEBHOOK_URL')
    if webhook_url:
        try:
            await bot.set_webhook(
                url=f"{webhook_url}/webhook",
                drop_pending_updates=True
            )
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            raise
    else:
        logger.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    app.router.add_post('/webhook', handle_webhook)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiogram
    setup_application(app, dp, bot=bot)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º startup –¥–µ–π—Å—Ç–≤–∏—è
    await on_startup(bot)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    port = int(os.getenv('WEBHOOK_PORT', 8000))  # ‚Üê –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!
    
    site = web.TCPSite(
        runner, 
        host='127.0.0.1',  # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Üê –í–∞–∂–Ω–æ!
        port=port,
        reuse_port=True
    )
    
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        await site.start()
        while True:
            await asyncio.sleep(3600)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        await runner.cleanup()
        await bot.session.close()
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")





