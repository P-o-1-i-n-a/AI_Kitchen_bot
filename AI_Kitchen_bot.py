import os
import asyncio
import logging
import hmac
import hashlib
from collections import deque
from typing import Deque, Dict

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, Text
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from groq import Groq

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GITHUB_WEBHOOK_SECRET = os.getenv("GITHUB_WEBHOOK_SECRET")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ .env
MODEL_NAME = "llama3-70b-8192"
CHANNEL_LINK = "https://t.me/ai_kitchen_channel"
SUPPORT_EMAIL = "ai_kitchen_help@outlook.com"
WEBHOOK_PORT = 5000
WEBHOOK_URL = "https://–≤–∞—à-–¥–æ–º–µ–Ω.—Ä—É/webhook"  # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram
GITHUB_WEBHOOK_PATH = "/github-webhook"  # –ü—É—Ç—å –¥–ª—è GitHub –≤–µ–±—Ö—É–∫–æ–≤

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()
client = Groq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
REQUEST_DELAY = 20
MAX_CONCURRENT_REQUESTS = 1
REQUEST_QUEUE: Deque[types.Message] = deque()
ACTIVE_REQUESTS: Dict[int, bool] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞")],
            [KeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

# Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
class RateLimitMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            if user_id in ACTIVE_REQUESTS and ACTIVE_REQUESTS[user_id]:
                await event.answer("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                return
        return await handler(event, data)

dp.message.middleware(RateLimitMiddleware())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async def process_queue():
    while True:
        if REQUEST_QUEUE and len([v for v in ACTIVE_REQUESTS.values() if v]) < MAX_CONCURRENT_REQUESTS:
            message = REQUEST_QUEUE.popleft()
            user_id = message.from_user.id
            ACTIVE_REQUESTS[user_id] = True
            try:
                await process_user_request(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            finally:
                ACTIVE_REQUESTS[user_id] = False
                await asyncio.sleep(REQUEST_DELAY)
        await asyncio.sleep(0.1)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
async def generate_recipe(prompt: str) -> str:
    try:
        system_prompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä..."
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": prompt}],
            temperature=0.7
        )
        recipe_text = response.choices[0].message.content
        disclaimer = f"\n\n‚ÑπÔ∏è –†–µ—Ü–µ–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò. –ü–æ–¥–ø–∏—à–∏—Å—å: {CHANNEL_LINK}"
        return recipe_text + disclaimer
    except Exception as e:
        logger.error(f"Groq error: {e}")
        return "‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("üç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Kitchen Bot!", reply_markup=get_main_menu())

# ... (–¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.post("/webhook")
async def handle_telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return JSONResponse({"status": "ok"})
    except Exception as e:
        logger.error(f"Telegram webhook error: {e}")
        return JSONResponse({"status": "error"}, status_code=500)

# –í–µ–±—Ö—É–∫ –¥–ª—è GitHub
@app.post(GITHUB_WEBHOOK_PATH)
async def handle_github_webhook(request: Request):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        body = await request.body()
        signature = request.headers.get("x-hub-signature-256")
        
        if not GITHUB_WEBHOOK_SECRET:
            logger.warning("GitHub webhook secret not configured")
            raise HTTPException(status_code=403, detail="Webhook secret not configured")
        
        if not signature:
            logger.warning("Missing GitHub signature")
            raise HTTPException(status_code=403, detail="Missing signature")
        
        computed_signature = 'sha256=' + hmac.new(
            GITHUB_WEBHOOK_SECRET.encode(),
            body,
            hashlib.sha256
        ).hexdigest()
        
        if not hmac.compare_digest(signature, computed_signature):
            logger.warning("Invalid GitHub signature")
            raise HTTPException(status_code=403, detail="Invalid signature")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π GitHub
        event = request.headers.get("x-github-event")
        payload = await request.json()
        
        logger.info(f"GitHub webhook received: {event}")
        logger.debug(f"Payload: {payload}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if event == "push":
            logger.info(f"Push event received for repo: {payload['repository']['full_name']}")
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –ø—É—à–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            # await bot.send_message(ADMIN_CHAT_ID, "–ü–æ–ª—É—á–µ–Ω push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        
        return JSONResponse({"status": "success"})
    
    except Exception as e:
        logger.error(f"GitHub webhook processing error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def start_bot():
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(process_queue())
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Telegram –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    logger.info(f"GitHub –≤–µ–±—Ö—É–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ: {WEBHOOK_URL}{GITHUB_WEBHOOK_PATH}")

if __name__ == "__main__":
    config = uvicorn.Config(
        app,
        host="0.0.0.0",
        port=WEBHOOK_PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    
    async def run():
        await start_bot()
        await server.serve()
    
    asyncio.run(run())
