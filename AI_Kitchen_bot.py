import os
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.middlewares import BaseMiddleware
from pip install aiogram==3.0.0b7 import CancelHandler
import openai
from collections import deque
import logging
from typing import Deque, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ OpenAI (3 RPM)
OPENAI_RATE_LIMIT = 3  # 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç—É
REQUEST_DELAY = 20  # 20 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (60/3=20)
MAX_CONCURRENT_REQUESTS = 1  # –¢–æ–ª—å–∫–æ 1 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å

# –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–∞ rate limiting
REQUEST_QUEUE: Deque[types.Message] = deque()
ACTIVE_REQUESTS: Dict[int, bool] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher(bot)
openai.api_key = os.getenv('OPENAI_API_KEY')

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞")],
        [KeyboardButton(text="üßÖ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º")],
        [KeyboardButton(text="üõë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

# –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state: Dict[int, Dict] = {}


class RateLimitMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id
        if user_id in ACTIVE_REQUESTS and ACTIVE_REQUESTS[user_id]:
            await message.answer("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            raise CancelHandler()


async def process_queue():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
    while True:
        if REQUEST_QUEUE and len([v for v in ACTIVE_REQUESTS.values() if v]) < MAX_CONCURRENT_REQUESTS:
            message = REQUEST_QUEUE.popleft()
            user_id = message.from_user.id

            ACTIVE_REQUESTS[user_id] = True
            try:
                await process_user_request(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            finally:
                ACTIVE_REQUESTS[user_id] = False
                await asyncio.sleep(REQUEST_DELAY)
        await asyncio.sleep(0.1)


async def generate_recipe(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=800,
            request_timeout=30
        )
        return response.choices[0].message.content
    except openai.error.RateLimitError:
        logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI")
        return "‚ö† –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 20 —Å–µ–∫—É–Ω–¥."
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def process_user_request(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = user_state.get(user_id, {})

    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    prompt = user_data.get('prompt')
    if not prompt:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    await message.answer("üç≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...")
    recipe = await generate_recipe(prompt)
    await message.answer(recipe, reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    user_state[message.from_user.id] = {}
    await message.reply(
        "üç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å AI. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_keyboard
    )


@dp.message_handler(Text(equals="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞"))
async def search_by_dish(message: types.Message):
    user_state[message.from_user.id] = {'mode': 'dish'}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")


@dp.message_handler(Text(equals="üßÖ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"))
async def search_by_ingredients(message: types.Message):
    user_state[message.from_user.id] = {'mode': 'ingredients'}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")


@dp.message_handler(Text(equals="üõë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"))
async def cancel_request(message: types.Message):
    user_id = message.from_user.id
    if user_id in ACTIVE_REQUESTS and ACTIVE_REQUESTS[user_id]:
        ACTIVE_REQUESTS[user_id] = False
        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    user_data = user_state.get(user_id, {})

    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞.", reply_markup=main_keyboard)
        return

    if 'mode' in user_data and 'prompt' not in user_data:
        if user_data['mode'] == 'dish':
            user_data['dish'] = message.text
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–∫—É—Ö–Ω—è, –¥–∏–µ—Ç–∞ –∏ —Ç.–¥.) –∏–ª–∏ /skip:")
            user_data['waiting_for_prefs'] = True
        elif user_data['mode'] == 'ingredients':
            user_data['ingredients'] = message.text
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ /skip:")
            user_data['waiting_for_prefs'] = True

    elif user_data.get('waiting_for_prefs', False):
        preferences = "" if message.text == "/skip" else message.text

        if user_data['mode'] == 'dish':
            prompt = f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: {user_data['dish']}. "
        else:
            prompt = f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è: {user_data['ingredients']}. "

        if preferences:
            prompt += f"–£—á—Ç–∏: {preferences}. "

        prompt += "–í–∫–ª—é—á–∏: 1) –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, 2) –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, 3) –≤—Ä–µ–º—è, 4) –ö–ë–ñ–£."

        user_data['prompt'] = prompt
        user_data['waiting_for_prefs'] = False

        await message.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ...")
        REQUEST_QUEUE.append(message)


async def on_startup(dp):
    """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    asyncio.create_task(process_queue())
    dp.middleware.setup(RateLimitMiddleware())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
