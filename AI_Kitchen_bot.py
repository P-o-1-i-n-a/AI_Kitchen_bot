#!/usr/bin/env python3
import os
import re
import json
import logging
import asyncio
import httpx
import uvloop
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

uvloop.install()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv('/etc/secrets/bot_env')

REQUIRED_KEYS = ['TELEGRAM_BOT_TOKEN', 'YANDEX_API_KEY', 'YANDEX_FOLDER_ID', 'WEBHOOK_URL']
for key in REQUIRED_KEYS:
    if not os.getenv(key):
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
        raise SystemExit(1)

DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
MAINTENANCE = os.getenv('MAINTENANCE', 'False').lower() == 'true'
logger.info(f"–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã: DEBUG={DEBUG}, MAINTENANCE={MAINTENANCE}")

bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()
app = web.Application()

YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
CHANNEL_LINK = os.getenv('CHANNEL_LINK', "https://t.me/ai_kitchen_channel")

MAX_RETRIES = 3
REQUEST_DELAY = 1

user_states = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
            [KeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")],
            [KeyboardButton(text="üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª")]
        ],
        resize_keyboard=True
    )

def meal_time_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÖ –ó–∞–≤—Ç—Ä–∞–∫"), KeyboardButton(text="üåá –û–±–µ–¥")],
            [KeyboardButton(text="üåÉ –£–∂–∏–Ω"), KeyboardButton(text="‚òï –ü–µ—Ä–µ–∫—É—Å")]
        ],
        resize_keyboard=True
    )

def cuisine_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∞—è"), KeyboardButton(text="üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"), KeyboardButton(text="üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è")],
            [KeyboardButton(text="üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è"), KeyboardButton(text="üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"), KeyboardButton(text="üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è")],
            [KeyboardButton(text="üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"), KeyboardButton(text="üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è"), KeyboardButton(text="üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è")],
            [KeyboardButton(text="üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è")]
        ],
        resize_keyboard=True
    )

def diet_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"), KeyboardButton(text="‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ"), KeyboardButton(text="üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ")],
            [KeyboardButton(text="‚ò™Ô∏è –•–∞–ª—è–ª—å"), KeyboardButton(text="‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è")]
        ],
        resize_keyboard=True
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def ensure_russian(text):
    return re.sub(r'[a-zA-Z]', '', text).strip()

async def safe_api_call(call, *args, **kwargs):
    for attempt in range(MAX_RETRIES):
        try:
            return await call(*args, **kwargs)
        except (httpx.ReadTimeout, httpx.ConnectTimeout):
            if attempt == MAX_RETRIES - 1:
                raise
            await asyncio.sleep(REQUEST_DELAY * (attempt + 1))
        except Exception as e:
            logger.error(f"API call error: {str(e)}")
            raise

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø - –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {}\n"
        "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Üì".format(os.getenv('BOT_LINK')),
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
async def show_offer(message: types.Message):
    await message.answer(
        "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞:\n\n"
        "1. –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.\n"
        "2. –í—ã –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –∏ —Å–≤–µ–∂–µ—Å—Ç—å.\n"
        "3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        disable_web_page_preview=True
    )

@dp.message(F.text == "üì¢ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª")
async def show_channel(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç≥ AI Kitchen Channel", url=CHANNEL_LINK)]
    ])
    await message.answer("üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏!", reply_markup=markup)

@dp.message(F.text == "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def ask_meal_time(message: types.Message):
    user_states[message.chat.id] = {"step": "waiting_meal_time"}
    await message.answer("üïí –î–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç?", reply_markup=meal_time_keyboard())

@dp.message(lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_meal_time")
async def ask_cuisine(message: types.Message):
    if message.text not in ["üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "üåá –û–±–µ–¥", "üåÉ –£–∂–∏–Ω", "‚òï –ü–µ—Ä–µ–∫—É—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", reply_markup=meal_time_keyboard())
        return
    user_states[message.chat.id] = {"step": "waiting_cuisine", "meal_time": message.text}
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:", reply_markup=cuisine_keyboard())

@dp.message(lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_cuisine")
async def ask_diet(message: types.Message):
    if message.text not in [btn.text for row in cuisine_keyboard().keyboard for btn in row]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", reply_markup=cuisine_keyboard())
        return
    user_states[message.chat.id]["cuisine"] = message.text
    user_states[message.chat.id]["step"] = "waiting_diet"
    await message.answer("ü•ó –ï—Å—Ç—å –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?", reply_markup=diet_keyboard())

@dp.message(lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_diet")
async def process_diet_choice(message: types.Message):
    user_states[message.chat.id]["diet_type"] = message.text
    if message.text == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
        user_states[message.chat.id]["step"] = "waiting_allergies"
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=types.ReplyKeyboardRemove())
    else:
        user_states[message.chat.id]["step"] = "waiting_ingredients"
        await ask_for_ingredients(message.chat.id)

@dp.message(lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_allergies")
async def process_allergies(message: types.Message):
    user_states[message.chat.id]["allergies"] = message.text
    user_states[message.chat.id]["step"] = "waiting_ingredients"
    await ask_for_ingredients(message.chat.id)

async def ask_for_ingredients(chat_id: int):
    await bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: 2 —è–π—Ü–∞, 100–≥ –º—É–∫–∏, 1 —Å—Ç.–ª. –º–∞—Å–ª–∞", reply_markup=types.ReplyKeyboardRemove())

@dp.message(lambda msg: user_states.get(msg.chat.id, {}).get("step") == "waiting_ingredients")
async def process_ingredients(message: types.Message):
    user_states[message.chat.id]["ingredients"] = message.text
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    await generate_recipe(message.chat.id)

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –° –Ø–ù–î–ï–ö–° GPT ---
async def generate_recipe(chat_id: int):
    try:
        data = user_states[chat_id]
        await bot.send_chat_action(chat_id, 'typing')

        diet_prompt = ""
        if data['diet_type'] == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
            diet_prompt = f" –ò—Å–∫–ª—é—á–∏: {data.get('allergies', '')}.–æ—Ç–ø—Ä–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã-–∞–ª–ª–µ—Ä–≥–µ–Ω—ã. –∏ –Ω–µ –±–µ—Ä–∏ –≤ —Ä–µ—Ü–µ–ø—Ç –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã-–∞–ª–ª–µ—Ä–≥–µ–Ω—ã"
        elif data['diet_type'] == "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–º (–º–µ–Ω–µ–µ 300 –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 20–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "‚ò™Ô∏è –•–∞–ª—è–ª—å":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ö–∞–ª—è–ª—å. –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —ç—Ç—É –¥–∏–µ—Ç—É. –∏ –Ω–µ –±–µ—Ä–∏ –≤ —Ä–µ—Ü–µ–ø—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –¥–∏–µ—Ç—ã –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"
        elif data['diet_type'] == "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø–æ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–±–µ–∑ –º—è—Å–∞, –º–æ–ª–æ–∫–∞, —è–∏—Ü). –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —ç—Ç—É –¥–∏–µ—Ç—É. –∏ –Ω–µ –±–µ—Ä–∏ –≤ —Ä–µ—Ü–µ–ø—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –¥–∏–µ—Ç—ã –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"

        prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
- –ü—Ä–∏–µ–º –ø–∏—â–∏: {data['meal_time']}
- –ö—É—Ö–Ω—è: {data['cuisine']}
- –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data['diet_type']}{f" (–∏—Å–∫–ª—é—á–∏—Ç—å: {data.get('allergies', '')})" if data['diet_type'] == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏" else ""}
- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {data['ingredients']}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É):
1. üçΩ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å –∫—É—Ö–Ω—é –∏ —Ç–∏–ø –±–ª—é–¥–∞)
2. üåç –ö—É—Ö–Ω—è: {data['cuisine']}
3. ü•ó –¢–∏–ø –¥–∏–µ—Ç—ã: {data['diet_type']}
4. ‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–æ–±—â–µ–µ –∏ –ø–æ —ç—Ç–∞–ø–∞–º)
5. üë®‚Äçüç≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (—É–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ)
6. üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é):
   - –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é
   - –£–∫–∞–∂–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ü–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö
7. üî™ –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç (–ø–æ–¥—Ä–æ–±–Ω—ã–µ —à–∞–≥–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø)
8. üìä –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é (—Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–π):
   - –ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)
   - –ë–µ–ª–∫–∏ (–≥)
   - –ñ–∏—Ä—ã (–≥)
   - –£–≥–ª–µ–≤–æ–¥—ã (–≥)
9. üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã (–ø–æ –∑–∞–º–µ–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ –ø–æ–¥–∞—á–µ)

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
üçΩ –°–ø–∞–≥–µ—Ç—Ç–∏ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ –ø–æ-—Ä–∏–º—Å–∫–∏
üåç –ö—É—Ö–Ω—è: –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è
ü•ó –¢–∏–ø –¥–∏–µ—Ç—ã: üö´ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 25 –º–∏–Ω (10 –º–∏–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, 15 –º–∏–Ω –≥–æ—Ç–æ–≤–∫–∞)
üë®‚Äçüç≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: 2

üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–Ω–∞ 1 –ø–æ—Ä—Ü–∏—é):
- –°–ø–∞–≥–µ—Ç—Ç–∏: 100–≥ (200–≥ –≤—Å–µ–≥–æ)
- –ì—É–∞–Ω—á–∏–∞–ª–µ: 50–≥ (100–≥ –≤—Å–µ–≥–æ)
- –Ø–π—Ü–æ: 1 —à—Ç (2 —à—Ç –≤—Å–µ–≥–æ)
- –ü–∞—Ä–º–µ–∑–∞–Ω: 30–≥ (60–≥ –≤—Å–µ–≥–æ)
- –ß–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü: –ø–æ –≤–∫—É—Å—É
- –°–æ–ª—å: —â–µ–ø–æ—Ç–∫–∞

üî™ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –û—Ç–≤–∞—Ä–∏—Ç–µ —Å–ø–∞–≥–µ—Ç—Ç–∏ –≤ –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–µ...
2. –û–±–∂–∞—Ä—å—Ç–µ –≥—É–∞–Ω—á–∏–∞–ª–µ –¥–æ —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–∏...
3. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º...
4. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã...

üìä –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é:
- –ö–∞–ª–æ—Ä–∏–∏: 550 –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: 25–≥
- –ñ–∏—Ä—ã: 30–≥
- –£–≥–ª–µ–≤–æ–¥—ã: 45–≥

üí° –°–æ–≤–µ—Ç—ã:
- –î–ª—è –±–æ–ª–µ–µ –ª–µ–≥–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏–≤–∫–∏ –≤–º–µ—Å—Ç–æ —è–∏—Ü
- –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –•—Ä–∞–Ω–∏—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"""

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {YANDEX_API_KEY}"
        }

        body = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {"stream": False, "temperature": 0.6, "maxTokens": 2048},
            "messages": [
                {"role": "system", "text": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"},
                {"role": "user", "text": prompt}
            ]
        }

        async with httpx.AsyncClient(timeout=60.0) as client:
            yandex_response = await safe_api_call(
                client.post,
                "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                headers=headers,
                data=json.dumps(body)
            )

            result = yandex_response.json()
            recipe = ensure_russian(result['result']['alternatives'][0]['message']['text'])

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç≥ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
        ])

        await bot.send_message(chat_id, recipe, reply_markup=markup)
        await bot.send_message(chat_id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç¬ª –∏–ª–∏ /start", reply_markup=main_keyboard())

# --- Webhook ---
async def handle_webhook(request):
    try:
        update_data = await request.json()
        update = types.Update(**update_data)
        await dp.feed_update(bot=bot, update=update)
        return web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(text="Error", status=500)

async def on_startup(bot: Bot):
    webhook_url = os.getenv('WEBHOOK_URL')
    if webhook_url:
        await bot.set_webhook(url=f"{webhook_url}/webhook", drop_pending_updates=True)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω!")

async def main():
    app.router.add_post('/webhook', handle_webhook)
    setup_application(app, dp, bot=bot)
    await on_startup(bot)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('WEBHOOK_PORT', 8000))
    site = web.TCPSite(runner, host='127.0.0.1', port=port, reuse_port=True)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    try:
        while True:
            await asyncio.sleep(3600)
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    finally:
        await runner.cleanup()
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

