#!/usr/bin/env python3
import os
import re
import logging
import asyncio
import httpx
import uvloop
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from groq import Groq
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –∫–∞–∫ event loop –¥–ª—è asyncio
uvloop.install()

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ======================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•
# ======================
load_dotenv('/etc/secrets/bot_env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_KEYS = ['TELEGRAM_BOT_TOKEN', 'GROQ_API_KEY']
for key in REQUIRED_KEYS:
    if not os.getenv(key):
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
        raise SystemExit(1)

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ======================
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()
app = web.Application()

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Groq –∫–ª–∏–µ–Ω—Ç–∞
groq_client = Groq(
    api_key=os.getenv('GROQ_API_KEY'),
    http_client=httpx.AsyncClient(proxies=None)
) if os.getenv('GROQ_API_KEY') else None

MODEL_NAME = "llama3-70b-8192"
CHANNEL_LINK = "https://t.me/ai_kitchen_channel"

# ======================
# –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ======================
user_states = {}

# [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ generate_recipe]

async def generate_recipe(chat_id: int):
    try:
        data = user_states[chat_id]
        await bot.send_chat_action(chat_id, 'typing')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –¥–∏–µ—Ç—ã
        diet_prompt = ""
        if data.get('diet_type') == "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏":
            diet_prompt = f" –ò—Å–∫–ª—é—á–∏: {data.get('allergies', '')}."
        elif data['diet_type'] == "‚öñÔ∏è –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–º (–º–µ–Ω–µ–µ 300 –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "üí™ –í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–µ":
            diet_prompt = " –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 20–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)."
        elif data['diet_type'] == "‚ò™Ô∏è –•–∞–ª—è–ª—å":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ö–∞–ª—è–ª—å (–±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã, –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ç.–¥.)."
        elif data['diet_type'] == "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è":
            diet_prompt = " –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø–æ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–±–µ–∑ –º—è—Å–∞, –º–æ–ª–æ–∫–∞, —è–∏—Ü)."

        if data['ingredients'].lower() == '—á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?':
            prompt = f"""–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏.{diet_prompt}
            –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –¥–æ–º–∞ —É —Ä–æ—Å—Å–∏—è–Ω. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""
        else:
            prompt = f"""–°–æ—Å—Ç–∞–≤—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è: {data['ingredients']}.{diet_prompt}
            –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""

        prompt += """
        –§–æ—Ä–º–∞—Ç (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º):
        üçΩ –ù–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        üåç –ö—É—Ö–Ω—è: [—Ç–∏–ø –∫—É—Ö–Ω–∏]
        ü•ó –î–∏–µ—Ç–∞: [—Ç–∏–ø –¥–∏–µ—Ç—ã]
        ‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: [–≤—Ä–µ–º—è]
        üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª):
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        üî™ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        üìä –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é (—É–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö):
        - –ö–∞–ª–æ—Ä–∏–∏: [–∫–∫–∞–ª]
        - –ë–µ–ª–∫–∏: [–≥]
        - –ñ–∏—Ä—ã: [–≥]
        - –£–≥–ª–µ–≤–æ–¥—ã: [–≥]
        üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:"""

        response = await groq_client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! "
                               "–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£."
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )

        recipe = ensure_russian(response.choices[0].message.content)
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç≥ –ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
        ])
        
        await bot.send_message(
            chat_id,
            recipe,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        await bot.send_message(
            chat_id,
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=main_keyboard()
        )
    finally:
        user_states[chat_id]["step"] = "done"

# [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
