from flask import Flask, request
import telebot
from telebot import types
import requests
from io import BytesIO
import os
import re

# --- –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Groq —Å –∑–∞—â–∏—Ç–æ–π ---
try:
    from groq import Groq
except ImportError as e:
    raise ImportError(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Groq. "
        "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ groq —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (pip install groq)."
    ) from e

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
from config import TOKEN, GROQ_API_KEY, HF_API_KEY, WEBHOOK_URL

bot = telebot.TeleBot(TOKEN)
client = Groq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None
MODEL_NAME = "llama3-70b-8192"

app = Flask(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states = {}

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
def generate_food_image(prompt):
    API_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    try:
        response = requests.post(
            API_URL,
            headers=headers,
            json={"inputs": f"—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞: {prompt}, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 4K"}
        )
        if response.status_code == 403:
            raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á")
        elif response.status_code == 429:
            raise Exception("–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")
        elif response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ API: {response.text}")
        return BytesIO(response.content)
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"))
    return markup

def meal_time_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üåá –û–±–µ–¥"),
        types.KeyboardButton("üåÉ –£–∂–∏–Ω"),
        types.KeyboardButton("‚òï –ü–µ—Ä–µ–∫—É—Å")
    ]
    markup.add(*buttons)
    return markup

def cuisine_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∞—è"),
        types.KeyboardButton("üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è"),
        types.KeyboardButton("üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è"),
        types.KeyboardButton("üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"),
        types.KeyboardButton("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è"),
        types.KeyboardButton("üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è"),
        types.KeyboardButton("üåç –î—Ä—É–≥–∞—è")
    ]
    markup.add(*buttons)
    return markup

def diet_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("ü•© –û–±—ã—á–Ω–∞—è"),
        types.KeyboardButton("üå± –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è"),
        types.KeyboardButton("üêÑ –ë–µ–∑ –º–æ–ª–æ—á–Ω—ã—Ö"),
        types.KeyboardButton("üåæ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞"),
        types.KeyboardButton("üçØ –ö–µ—Ç–æ"),
        types.KeyboardButton("‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è"),
        types.KeyboardButton("‚ö° –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    ]
    markup.add(*buttons)
    return markup

def image_request_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üñº –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image"))
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø - –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Üì",
        reply_markup=main_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")
def ask_meal_time(message):
    user_states[message.chat.id] = {"step": "waiting_meal_time"}
    bot.send_message(
        message.chat.id,
        "üïí –î–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç?",
        reply_markup=meal_time_keyboard()
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_meal_time")
def ask_cuisine(message):
    if message.text not in ["üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "üåá –û–±–µ–¥", "üåÉ –£–∂–∏–Ω", "‚òï –ü–µ—Ä–µ–∫—É—Å"]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", reply_markup=meal_time_keyboard())
        return

    user_states[message.chat.id] = {
        "step": "waiting_cuisine",
        "meal_time": message.text
    }
    bot.send_message(
        message.chat.id,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é (—Ç–æ–ø-10 –¥–ª—è –†–æ—Å—Å–∏–∏):",
        reply_markup=cuisine_keyboard()
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_cuisine")
def ask_diet(message):
    valid_cuisines = ["üá∑üá∫ –†—É—Å—Å–∫–∞—è", "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è", "üá¨üá™ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è",
                      "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è", "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è",
                      "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è", "üåç –î—Ä—É–≥–∞—è"]

    if message.text not in valid_cuisines:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", reply_markup=cuisine_keyboard())
        return

    user_states[message.chat.id]["cuisine"] = message.text
    user_states[message.chat.id]["step"] = "waiting_diet"
    bot.send_message(
        message.chat.id,
        "ü•ó –ï—Å—Ç—å –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?\n"
        "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è - –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤",
        reply_markup=diet_keyboard()
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_diet")
def ask_ingredients(message):
    valid_diets = ["ü•© –û–±—ã—á–Ω–∞—è", "üå± –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", "üêÑ –ë–µ–∑ –º–æ–ª–æ—á–Ω—ã—Ö",
                   "üåæ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "üçØ –ö–µ—Ç–æ", "‚ò¶Ô∏è –ü–æ—Å—Ç–Ω–∞—è", "‚ö° –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"]

    if message.text not in valid_diets:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Üì", reply_markup=diet_keyboard())
        return

    user_states[message.chat.id]["diet"] = message.text
    user_states[message.chat.id]["step"] = "waiting_ingredients"
    bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: 2 —è–π—Ü–∞, 100–≥ –º—É–∫–∏, 1 —Å—Ç.–ª. –º–∞—Å–ª–∞\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "waiting_ingredients")
def process_ingredients(message):
    user_states[message.chat.id]["ingredients"] = message.text
    generate_recipe(message.chat.id)

def ensure_russian(text):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.sub(r'[a-zA-Z]', '', text).strip()

def generate_recipe(chat_id):
    try:
        data = user_states[chat_id]
        bot.send_chat_action(chat_id, 'typing')

        if data['ingredients'].lower() == '—á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?':
            prompt = f"""–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏, 
            —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π {data['diet']} –¥–∏–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ 
            –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –¥–æ–º–∞ —É —Ä–æ—Å—Å–∏—è–Ω. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""
        else:
            prompt = f"""–°–æ—Å—Ç–∞–≤—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {data['meal_time']} –≤ —Å—Ç–∏–ª–µ {data['cuisine']} –∫—É—Ö–Ω–∏, 
            —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π {data['diet']} –¥–∏–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è: {data['ingredients']}. 
            –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""

        prompt += """
        –§–æ—Ä–º–∞—Ç (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º):
        üçΩ –ù–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        üåç –ö—É—Ö–Ω—è: [—Ç–∏–ø –∫—É—Ö–Ω–∏]
        ü•ó –î–∏–µ—Ç–∞: [—Ç–∏–ø –¥–∏–µ—Ç—ã]
        ‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: [–≤—Ä–µ–º—è]
        üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –≥—Ä–∞–º–º–∞—Ö/–º–ª):
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        üî™ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        üìä –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é (—É–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö):
        - –ö–∞–ª–æ—Ä–∏–∏: [–∫–∫–∞–ª]
        - –ë–µ–ª–∫–∏: [–≥]
        - –ñ–∏—Ä—ã: [–≥]
        - –£–≥–ª–µ–≤–æ–¥—ã: [–≥]
        üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:"""

        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! "
                    "–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£."
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )

        recipe = ensure_russian(response.choices[0].message.content)
        user_states[chat_id]["recipe_title"] = recipe.split('\n')[0].replace('üçΩ', '').strip()
        user_states[chat_id]["full_recipe"] = recipe

        bot.send_message(
            chat_id,
            recipe,
            reply_markup=image_request_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        bot.send_message(
            chat_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}",
            reply_markup=main_keyboard()
        )
    finally:
        user_states[chat_id]["step"] = "recipe_ready"

@bot.callback_query_handler(func=lambda call: call.data == "generate_image")
def handle_image_request(call):
    try:
        chat_id = call.message.chat.id
        recipe_title = user_states.get(chat_id, {}).get("recipe_title")
        if not recipe_title:
            raise Exception("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        bot.send_message(chat_id, "üñå –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥")
        image_bytes = generate_food_image(f"{recipe_title}, {user_states[chat_id]['cuisine']} –∫—É—Ö–Ω—è")

        bot.send_photo(
            chat_id,
            image_bytes,
            caption=f"üçΩ {recipe_title}\nüåç {user_states[chat_id]['cuisine']} –∫—É—Ö–Ω—è",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        bot.send_message(
            chat_id,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}",
            reply_markup=main_keyboard()
        )

@bot.message_handler(func=lambda m: True)
def handle_other(message):
    bot.send_message(
        message.chat.id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üç≥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç¬ª –∏–ª–∏ /start",
        reply_markup=main_keyboard()
    )

# --- Flask Webhook ---
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    else:
        return "Unsupported Media Type", 415

@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    bot.remove_webhook()
    success = bot.set_webhook(url=WEBHOOK_URL)
    return ("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
